!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["@discord-bot-creator/bot"]=t():e["@discord-bot-creator/bot"]=t()}(global,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";
/*!
 * Copyright (c) Discord Bot Creator.
 *
 * This source code is licensed under the GPL-3.0.
 */var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=new(i(n(2)).default)(JSON.parse(o.readFileSync("./storage.json","utf-8"))),s=JSON.parse(o.readFileSync("./package.json","utf-8")).main;(process.mainModule.filename.endsWith(s)||process.mainModule.filename.endsWith(s+".js"))&&a.start(),t.default=a},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const discord_js_1=__importDefault(__webpack_require__(3)),fs_1=__importDefault(__webpack_require__(0)),node_fetch_1=__importDefault(__webpack_require__(4)),actions_1=__importDefault(__webpack_require__(5));class DBCBot{constructor(e){e.config.intents||(e.config.intents=[],e.config.intents.push("GUILDS"),e.config.intents.push("GUILD_MESSAGES"),fs_1.default.writeFileSync("./storage.json",JSON.stringify(e,null,2))),e.config.intents.includes("GUILDS")||(e.config.intents.push("GUILDS"),fs_1.default.writeFileSync("./storage.json",JSON.stringify(e,null,2))),e.config.intents.includes("GUILD_MESSAGES")||(e.config.intents.push("GUILD_MESSAGES"),fs_1.default.writeFileSync("./storage.json",JSON.stringify(e,null,2))),this.storage=e,this.client=new discord_js_1.default.Client({ws:{intents:this.storage.config.intents}}),this.globalVariables=new Map}get version(){return JSON.parse(fs_1.default.readFileSync("./package.json","utf-8")).version}get actions(){return actions_1.default}get utils(){return{log(e,t,n){const i=new Date,o=`${i.getMonth()}/${i.getDate()}/${i.getFullYear()} - ${i.getHours()}:${i.getMinutes()}:${i.getSeconds()}`;switch(e){case"info":console.log(`[${o}] [36minfo[0m ${t}`);break;case"success":console.log(`[${o}] [32msuccess[0m ${t}`);break;case"error":console.error(`[${o}] [31merror[0m ${t}`);break;case"alert":console.log(`[${o}] [33malert[0m ${t}`)}n&&process.exit(0)}}}async start(){this.utils.log("info","Checking if your bot is up to date...");try{const e=await(await node_fetch_1.default("https://raw.githubusercontent.com/discord-bot-creator/bot/master/package.json")).json();if(this.version!==e.version){this.utils.log("alert","Your bot is not up to date, updating...");try{const t=await(await node_fetch_1.default("https://raw.githubusercontent.com/discord-bot-creator/bot/master/dist/bot.js")).text();fs_1.default.writeFileSync("./package.json",JSON.stringify(e,null,2)),fs_1.default.writeFileSync("./bot.js",t),this.utils.log("success","Bot updated! Start your bot again.",!0)}catch(e){switch(e.code){case"ENOTFOUND":this.utils.log("error","Not was possible install the update, check your internet connection!",!0);break;default:this.utils.log("error","Unknown error: "+e,!0)}}}this.utils.log("info","Your bot is up to date.")}catch(e){switch(e.code){case"ENOTFOUND":this.utils.log("error","Not was possible check if your bot is up to date, check your internet connection!",!0);break;default:this.utils.log("error","Unknown error: "+e,!0)}}this.client.on("ready",()=>this.utils.log("success","Bot started!")),this.client.on("message",message=>{if(message.content.startsWith(this.storage.config.prefix)||!message.author.bot){const commandArgs=message.content.slice(this.storage.config.prefix.length).split(/ +/),commandName=this.storage.config.caseSensitive?commandArgs.shift().toLowerCase():commandArgs.shift(),command=this.storage.commands.find(e=>e.name===commandName)||this.storage.commands.find(e=>e.aliases.includes(commandName));if(command){const actions=this.actions,action=actions.find(e=>e.name===command.actions[0].name),log=this.utils.log,variables=new Map,globalVariables=this.globalVariables;if(action.intents&&!this.storage.config.intents.includes(action.intents))return log("error","Your bot config does not have the following intents to use some actions: "+action.intents.join(", "));function getField(index,id){const field=command.actions[index].fields.find(e=>e.id===id);if(field){const result=eval(`\n              function variable(name) {\n                return variables.get(name) || \n                globalVariables.get(name);\n              }\n              const command = message;\n              ${"`"+field.value+"`"}\n            `);return result}}function throwActionError(e,t){log("error",`Ocurred on command ${commandName} on action ${e}: ${t}`,!0)}function goToAction(e){e.index++,command.actions[e.index]&&actions.find(t=>t.name===command.actions[e.index].name).run(e)}const cache={client:this.client,message:message,index:0,variables:variables,globalVariables:globalVariables,getField:getField,throwActionError:throwActionError,goToAction:goToAction};action.run(cache)}}});for(const event of this.storage.events)this.client.on(event.type,(output0,output1)=>{const variables=new Map,globalVariables=this.globalVariables;if(event.outputs){let e=0;for(const t of event.outputs)output1&&1===e?variables.set(t,output1):variables.set(t,output0),e++}const actions=this.actions,action=actions.find(e=>e.name===event.actions[0].name),log=this.utils.log;function getField(index,id){const field=event.actions[index].fields.find(e=>e.id===id);if(field){const result=eval(`\n              function variable(name) {\n                return variables.get(name) || \n                globalVariables.get(name);\n              }\n              const command = message;\n              ${"`"+field.value+"`"}\n            `);return result}}function throwActionError(e,t){log("error",`Ocurred on event ${event.name} on action ${e}: ${t}`,!0)}function goToAction(e){e.index++,event.actions[e.index]&&actions.find(t=>t.name===event.actions[e.index].name).run(e)}const cache={index:0,variables:variables,globalVariables:globalVariables,getField:getField,throwActionError:throwActionError,client:this.client,goToAction:goToAction};action.run(cache)});this.utils.log("info","Starting bot..."),this.client.login(this.storage.config.token).catch(e=>{switch(e.code){case"TOKEN_INVALID":this.utils.log("error","You placed an invalid token in your bot config.",!0);break;default:this.utils.log("error","Unknown error: "+e,!0)}})}}exports.default=DBCBot},function(e,t){e.exports=require("discord.js")},function(e,t){e.exports=require("node-fetch")},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(6)),a=i(n(7)),s=i(n(8)),r=i(n(9)),l=i(n(10)),c=[o.default,a.default,s.default,r.default,l.default];t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=new class{get name(){return"Send Message"}get description(){return"Send messages to channels, users and bot logs."}get category(){return"Client/Messages"}html(e){return`\n      <div>\n        <div>\n          <label id="send-to">Send to</label>\n          <select id="send-to" isDBCField>\n            ${e?'\n              <option value="command-channel">\n                Command Channel\n              </option>\n              <option value="command-author">\n                Command Author\n              </option>\n            ':""}\n            <option value="bot-logs">Bot Logs</option>\n            <option value="variable">\n              Channel/User Variable\n            </option>\n            <option value="global-variable">\n              Channel/User Global Variable\n            </option>\n          </select>\n        </div>\n        <div id="variable-name-container" style="display: none;">\n          <label id="variable-name">Variable Name</label>\n          <input id="variable-name" type="text" isDBCField>\n        </div>\n      </div>\n      <div>\n        <label id="message">Message</label>\n        <textarea id="message" isDBCField></textarea>\n      </div>\n      <script>\n        const messageSendTo = document.getElementById('message-send-to')\n        const variableNameContainer = document.getElementById('variable-name-container')\n            \n        messageSendTo.addEventListener('select', (e) => {\n          if (\n            e.target.value === 'channel-user-variable' ||\n            e.target.value === 'channel-user-global-variable'\n          ) {\n            variableNameContainer.style.display = ''\n          } else {\n            if (variableNameContainer.style.display !== 'none') {\n              variableNameContainer.style.display = 'none'\n            }\n          }\n        })\n      <\/script>\n    `}async run(e){const t=e.getField(e.index,"send-to"),n=e.getField(e.index,"variable-name"),i=e.getField(e.index,"message");try{switch(t){case"command-channel":await e.message.channel.send(i);break;case"command-author":await e.message.author.send(i);break;case"variable":await e.variables.get(n).send(i);break;case"global-variable":await e.globalVariables.get(n).send(i)}e.goToAction(e)}catch(t){e.throwActionError(e.index,t)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=new class{get name(){return"Jump to Action"}get description(){return"Jump to any selected action number, if exists."}get category(){return"Actions"}html(){return'\n      <div>\n        <label id="action-to-jump">Action to Jump</label>\n        <input id="action-to-jump" type="number" isDBCField>\n      </div>\n    '}run(e){const t=Number(e.getField(e.index,"action-to-jump"));e.index=t,e.goToAction(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=new class{get name(){return"Skip Actions"}get description(){return"Skip a sequence of actions according with the amount."}get category(){return"Actions"}html(){return'\n      <div>\n        <label id="amount-to-skip">Amount to Skip</label>\n        <input id="amount-to-skip" type="number" isDBCField>\n      </div>\n    '}run(e){const t=Number(e.getField(e.index,"amount-to-skip"));e.index+=t,e.goToAction(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=new class{get name(){return"Stop Actions"}get description(){return"Stop the actions sequence."}get category(){return"Actions"}html(){}run(){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=new class{get name(){return"Create Variable"}get description(){return"Create custom variables."}get category(){return"Variables"}html(){return'\n      <div>\n        <label id="variable-type">Variable Type</label>\n        <select id="variable-type" isDBCField>\n          <option value="text">Text</option>\n          <option value="number">Number</option>\n          <option value="object">Object</option>\n          <option value="list">List</option>\n          <option value="true-false">True/false</option>\n        </select>\n      </div>\n      <br>\n      <div>\n        <label id="variable-value">Variable Value</label>\n        <textarea id="variable-value" isDBCField></textarea>\n      </div>\n      <br>\n      <div>\n        <div>\n          <label id="variable-storage">Store in</label>\n          <select id="variable-storage" isDBCField>\n            <option value="temp">Variable</option>\n            <option value="global">Global Variable</option>\n          </select>\n        </div>\n        <div>\n          <label id="variable-name">Variable Name</label>\n          <input id="variable-name" type="text" isDBCField>\n        </div>\n      </div>\n    '}run(e){const t=e.getField(e.index,"variable-type");let n=e.getField(e.index,"variable-value");const i=e.getField(e.index,"variable-storage"),o=e.getField(e.index,"variable-name");switch(t){case"text":n=String(n);break;case"number":n=Number(n);break;case"object":n=Object(n);break;case"list":n=Array(n);break;case"true-false":n=Boolean(n)}"temp"===i?e.variables.set(o,n):e.globalVariables.set(o,n),e.goToAction(e)}}}])}));